{"version":3,"sources":["Components/BeerItem.js","Components/BeerList.js","Components/HeaderNav.js","Components/BeerCard.js","App.js","serviceWorker.js","index.js"],"names":["BeerPic","beer","to","id","className","src","image_url","alt","name","BeerList","location","history","useState","beers","setBeers","queryString","qs","parse","search","ignoreQueryPrefix","page","parseInt","itemsPage","setItemsPage","useEffect","fetch","then","response","json","responseData","catch","error","console","log","handlePageChanges","delta","path","push","length","pageDisplay","onClick","disabled","onChange","e","target","value","map","key","HeaderNav","exact","BeerCard","props","beerID","match","params","beerData","setBeerData","brewers_tips","food_pairing","App","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.98bc5f7e.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst BeerPic = ({ beer }) => {\n  // href={beer.image_url} target=\"_blank\" rel=\"noopener noreferrer\"\n  return (\n    <NavLink to={`/beers/${beer.id}`}>\n      <div className=\"beer-item\">\n        <img src={beer.image_url} alt={beer.name} className=\"beer-image\"></img>\n        <div className=\"pic-name\">{beer.id + \"-\" + \" \" + beer.name}</div>\n      </div>\n    </NavLink>\n  );\n};\n\nexport default BeerPic;\n","import React, { useState, useEffect } from \"react\";\nimport qs from \"qs\";\nimport BeerPic from \"./BeerItem.js\";\n\nconst BeerList = ({ location, history }) => {\n  const [beers, setBeers] = useState([]);\n\n  const queryString = qs.parse(location.search, { ignoreQueryPrefix: true });\n  const page = parseInt(queryString.page) || 1;\n\n  const [itemsPage, setItemsPage] = useState(25);\n  useEffect(() => {\n    fetch(`https://api.punkapi.com/v2/beers?page=${page}&per_page=${itemsPage}`)\n      .then((response) => response.json())\n      .then((responseData) => {\n        setBeers(responseData);\n      })\n      .catch((error) => {\n        console.log(\"Error fetching and parsing data\", error);\n      });\n  }, [page, itemsPage]);\n\n  const handlePageChanges = (delta) => {\n    const path = `/?page=${parseInt(page) + delta}`;\n    history.push(path);\n  };\n\n  console.log(\"Type of BEERS\", beers && beers, typeof beers);\n  console.log(\"BEERLIST\", page);\n  console.log(itemsPage, \"!==\", beers.length, itemsPage !== beers.length);\n\n  const pageDisplay = `page : ${page}`;\n  return (\n    <div>\n      <div className=\"nav-options\">\n        <button\n          onClick={() => handlePageChanges(-1)}\n          className=\"page-nav\"\n          disabled={page === 1 ? true : false}\n        >\n          ⇦\n        </button>\n        <span>{pageDisplay}</span>\n        <div>\n          <label>Bières par page :</label>\n          <select onChange={(e) => setItemsPage(parseInt(e.target.value))}>\n            <option value={25}>25</option>\n            <option value={50}>50</option>\n            <option value={75}>75</option>\n          </select>\n        </div>\n\n        <button\n          onClick={() => handlePageChanges(1)}\n          className=\"page-nav\"\n          disabled={beers.length !== itemsPage ? true : false}\n        >\n          ⇨\n        </button>\n      </div>\n      {beers.length > 0 ? (\n        <ul className=\"beer-list\">\n          {beers.map((beer) => (\n            <BeerPic key={beer.id} beer={beer} />\n          ))}\n        </ul>\n      ) : (\n        <p>LOADING...</p>\n      )}\n    </div>\n  );\n};\n\nexport default BeerList;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst HeaderNav = () => {\n  return (\n    <ul className=\"main-nav\">\n      <li>\n        <NavLink exact to=\"/\">\n          1\n        </NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/?page=2\">2</NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/?page=3\">3</NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/?page=4\">4</NavLink>\n      </li>\n    </ul>\n  );\n};\n\nexport default HeaderNav;\n","import React, { useEffect, useState } from \"react\";\nimport BeerPic from \"./BeerItem\";\n\nconst BeerCard = (props) => {\n  console.log(\"+_BEERCARD_-=+=\", props);\n\n  const beerID = props.match.params.id;\n  const [beerData, setBeerData] = useState();\n\n  useEffect(() => {\n    fetch(`https://api.punkapi.com/v2/beers/${beerID}`)\n      .then((response) => response.json())\n      .then((responseData) => {\n        setBeerData(responseData[0]);\n      })\n      .catch((error) => {\n        console.log(\"Error fetching and parsing data\", error);\n      });\n  }, [beerID]);\n\n  if (!beerData) {\n    return null;\n  }\n  console.log(beerData);\n  return (\n    <div className=\"beer-card\">\n      <img\n        src={beerData.image_url}\n        alt={beerData.name}\n        className=\"beer-card-image\"\n      ></img>\n      <div className=\"beer-card-info\">\n        <h1>\n          <strong>{beerData.name}</strong>\n        </h1>\n        <h2>BREWERS TIPS</h2>\n        <p>{beerData.brewers_tips}</p>\n        <h2>FOOD PAIRING</h2>\n        <p>{beerData.food_pairing}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default BeerCard;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport BeerList from \"./Components/BeerList.js\";\nimport HeaderNav from \"./Components/HeaderNav.js\";\nimport BeerCard from \"./Components/BeerCard\";\n\nfunction App() {\n  console.log(\"render app\");\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>binouze.me</h1>\n          <h3>bienvenue chez vous</h3>\n          <HeaderNav />\n        </header>\n\n        <Switch>\n          <Route exact path=\"/\" component={BeerList} />\n          <Route path=\"/beers/:id\" component={BeerCard} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}