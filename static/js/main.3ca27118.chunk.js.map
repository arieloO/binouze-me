{"version":3,"sources":["Components/BeerItem.js","Components/NavOptions.js","Components/BeerList.js","Components/HeaderNav.js","Components/BeerCard.js","Components/NoMatch.js","App.js","serviceWorker.js","index.js"],"names":["BeerPic","beer","to","id","className","src","image_url","alt","name","NavOptions","beers","itemsPage","page","handlePageChanges","setItemsPage","pageDisplay","onClick","disabled","onChange","e","parseInt","target","value","length","BeerList","location","history","useState","setBeers","queryString","qs","parse","search","ignoreQueryPrefix","useEffect","fetch","then","response","json","responseData","catch","error","console","log","delta","path","push","map","key","HeaderNav","exact","activeClassName","BeerCard","props","beerID","match","params","beerData","setBeerData","tagline","brewers_tips","food_pairing","NoMatch","App","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3ca27118.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst BeerPic = ({ beer }) => {\n  // href={beer.image_url} target=\"_blank\" rel=\"noopener noreferrer\"\n  return (\n    <NavLink to={`/binouze-me/beers/${beer.id}`}>\n      <div className=\"beer-item\">\n        <img src={beer.image_url} alt={beer.name} className=\"beer-image\"></img>\n        <div className=\"pic-name\">{beer.id + \"-\" + \" \" + beer.name}</div>\n      </div>\n    </NavLink>\n  );\n};\n\nexport default BeerPic;\n","import React, { useState, useEffect } from \"react\";\n\nconst NavOptions = ({\n  beers,\n  itemsPage,\n  page,\n  handlePageChanges,\n  setItemsPage,\n  pageDisplay,\n}) => {\n  return (\n    <div className=\"nav-options\">\n      <button\n        onClick={() => handlePageChanges(-1)}\n        className=\"page-nav\"\n        disabled={page === 1 ? true : false}\n      >\n        ⇦\n      </button>\n      <span>{pageDisplay}</span>\n      <div>\n        <label>Bières par page :</label>\n        <select onChange={(e) => setItemsPage(parseInt(e.target.value))}>\n          <option value={25}>25</option>\n          <option value={50}>50</option>\n          <option value={75}>75</option>\n        </select>\n      </div>\n\n      <button\n        onClick={() => handlePageChanges(1)}\n        className=\"page-nav\"\n        disabled={beers.length !== itemsPage ? true : false}\n      >\n        ⇨\n      </button>\n    </div>\n  );\n};\n\nexport default NavOptions;\n","import React, { useState, useEffect } from \"react\";\nimport qs from \"qs\";\nimport BeerPic from \"./BeerItem.js\";\nimport NavOptions from \"./NavOptions.js\";\n\nconst BeerList = ({ location, history }) => {\n  const [beers, setBeers] = useState([]);\n\n  const queryString = qs.parse(location.search, { ignoreQueryPrefix: true });\n  const page = parseInt(queryString.page) || 1;\n\n  const [itemsPage, setItemsPage] = useState(25);\n  useEffect(() => {\n    fetch(`https://api.punkapi.com/v2/beers?page=${page}&per_page=${itemsPage}`)\n      .then((response) => response.json())\n      .then((responseData) => {\n        setBeers(responseData);\n      })\n      .catch((error) => {\n        console.log(\"Error fetching and parsing data\", error);\n      });\n  }, [page, itemsPage]);\n\n  const handlePageChanges = (delta) => {\n    const path = `/binouze-me/?page=${parseInt(page) + delta}`;\n    history.push(path);\n  };\n\n  console.log(\"Type of BEERS\", beers && beers, typeof beers);\n  console.log(\"BEERLIST\", page);\n  console.log(itemsPage, \"!==\", beers.length, itemsPage !== beers.length);\n\n  const pageDisplay = `page : ${page}`;\n  return (\n    <div>\n      <NavOptions\n        beers={beers}\n        itemsPage={itemsPage}\n        page={page}\n        handlePageChanges={handlePageChanges}\n        setItemsPage={setItemsPage}\n        pageDisplay={pageDisplay}\n      />\n\n      {beers.length > 0 ? (\n        <ul className=\"beer-list\">\n          {beers.map((beer) => (\n            <BeerPic key={beer.id} beer={beer} />\n          ))}\n        </ul>\n      ) : (\n        <p>LOADING...</p>\n      )}\n    </div>\n  );\n};\n\nexport default BeerList;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst HeaderNav = () => {\n  return (\n    <ul className=\"main-nav\">\n      <li>\n        <NavLink exact to=\"/binouze-me\" activeClassName=\"active-nav-route\">\n          Catalogue\n        </NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/binouze-me/?page=2\">recherche</NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/binouze-me/?page=3\">top</NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/binouze-me/?page=4\">flop</NavLink>\n      </li>\n    </ul>\n  );\n};\n\nexport default HeaderNav;\n","import React, { useEffect, useState } from \"react\";\n\nconst BeerCard = (props) => {\n  console.log(\"+_BEERCARD_-=+=\", props);\n\n  const beerID = props.match.params.id;\n  const [beerData, setBeerData] = useState();\n\n  useEffect(() => {\n    fetch(`https://api.punkapi.com/v2/beers/${beerID}`)\n      .then((response) => response.json())\n      .then((responseData) => {\n        setBeerData(responseData[0]);\n      })\n      .catch((error) => {\n        console.log(\"Error fetching and parsing data\", error);\n      });\n  }, [beerID]);\n\n  if (!beerData) {\n    return null;\n  }\n  console.log(beerData);\n  return (\n    <div className=\"beer-card\">\n      <img\n        src={beerData.image_url}\n        alt={beerData.name}\n        className=\"beer-card-image\"\n      ></img>\n      <div className=\"beer-card-info\">\n        <h1>\n          <strong>{beerData.name}</strong>\n        </h1>\n        <p>{beerData.tagline}</p>\n        <h2>BREWERS TIPS</h2>\n        <p>{beerData.brewers_tips}</p>\n        <h2>FOOD PAIRING</h2>\n        <p>{beerData.food_pairing}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default BeerCard;\n","import React from \"react\";\n\nconst NoMatch = () => <div className=\"error404\">404, not found</div>;\n\nexport default NoMatch;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport BeerList from \"./Components/BeerList.js\";\nimport HeaderNav from \"./Components/HeaderNav.js\";\nimport BeerCard from \"./Components/BeerCard\";\nimport NoMatch from \"./Components/NoMatch\";\n\nfunction App() {\n  console.log(\"render app\");\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>binouze-me</h1>\n          <h3>bienvenue chez Brewdog</h3>\n          <HeaderNav />\n        </header>\n\n        <Switch>\n          <Route path=\"/binouze-me\" component={BeerList} />\n          <Route path=\"/binouze-me/beers/:id\" component={BeerCard} />\n          <Route component={NoMatch} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}