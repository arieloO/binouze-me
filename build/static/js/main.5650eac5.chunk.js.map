{"version":3,"sources":["Components/BeerPic.js","Components/BeerList.js","App.js","serviceWorker.js","index.js"],"names":["BeerPic","beer","href","image_url","target","rel","src","alt","name","BeerList","useState","nextPage","setNextPage","beers","setBeers","useEffect","fetch","then","response","json","responseData","oldBeers","catch","error","console","log","length","className","map","key","id","onClick","prevPage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uOAeeA,EAbC,SAAC,GAAc,IAAD,EAAXC,EAAW,EAAXA,KACjB,OACE,uBAAGC,KAAMD,EAAKE,UAAWC,OAAO,SAASC,IAAI,uBAC3C,4BACEC,IAAKL,EAAKE,UACVI,IAAKN,EAAKO,MAFZ,oBAGOP,EAAKO,MAHZ,0BAIY,cAJZ,MCkCSC,EAnCE,WAAO,IAAD,EACWC,mBAAS,GADpB,mBACdC,EADc,KACJC,EADI,OAEKF,mBAAS,IAFd,mBAEdG,EAFc,KAEPC,EAFO,KAiBrB,OAbAC,qBAAU,WACRC,MAAM,yCAAD,OAA0CL,EAA1C,iBACFM,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLN,GAAS,SAACO,GAAD,4BAAkBA,GAAlB,YAA+BD,UAEzCE,OAAM,SAACC,GACNC,QAAQC,IAAI,kCAAmCF,QAElD,CAACZ,IAEJa,QAAQC,IAAI,eAAgBZ,GAASA,SAAcA,GAGjD,6BACGA,EAAMa,OAAS,EACd,wBAAIC,UAAU,aACXd,EAAMe,KAAI,SAAC3B,GAAD,OACT,kBAAC,EAAD,CAAS4B,IAAK5B,EAAK6B,GAAI7B,KAAMA,QAIjC,yCAEF,4BAAQ8B,QAAS,kBAAMnB,GAAY,SAACoB,GAAD,OAAcA,EAAW,OAA5D,cCfSC,MAbf,WAEE,OADAT,QAAQC,IAAI,cAEV,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,0CACA,oDAEF,kBAAC,EAAD,QCAcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd1B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM0B,a","file":"static/js/main.5650eac5.chunk.js","sourcesContent":["import React from \"react\";\n\nconst BeerPic = ({ beer }) => {\n  return (\n    <a href={beer.image_url} target=\"_blank\" rel=\"noopener noreferrer\">\n      <img\n        src={beer.image_url}\n        alt={beer.name}\n        alt={beer.name}\n        className=\"beer-image\"\n      ></img>\n    </a>\n  );\n};\n\nexport default BeerPic;\n","import React, { useState, useEffect } from \"react\";\nimport BeerPic from \"./BeerPic.js\";\nimport BeerCard from \"./BeerCard.js\";\n\nconst BeerList = () => {\n  const [nextPage, setNextPage] = useState(1);\n  const [beers, setBeers] = useState([]);\n\n  useEffect(() => {\n    fetch(`https://api.punkapi.com/v2/beers?page=${nextPage}&per_page=24`)\n      .then((response) => response.json())\n      .then((responseData) => {\n        setBeers((oldBeers) => [...oldBeers, ...responseData]);\n      })\n      .catch((error) => {\n        console.log(\"Error fetching and parsing data\", error);\n      });\n  }, [nextPage]);\n\n  console.log(\"WTF __OKPOJO\", beers && beers, typeof beers);\n\n  return (\n    <div>\n      {beers.length > 0 ? (\n        <ul className=\"beer-list\">\n          {beers.map((beer) => (\n            <BeerPic key={beer.id} beer={beer} />\n          ))}\n        </ul>\n      ) : (\n        <p>LOADING...</p>\n      )}\n      <button onClick={() => setNextPage((prevPage) => prevPage + 1)}>\n        ShowMore\n      </button>\n    </div>\n  );\n};\n\nexport default BeerList;\n","import React from \"react\";\nimport \"./App.css\";\nimport BeerList from \"./Components/BeerList.js\";\n\nfunction App() {\n  console.log(\"render app\");\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>binouze.me</h1>\n        <h3>bienvenue chez vous</h3>\n      </header>\n      <BeerList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}